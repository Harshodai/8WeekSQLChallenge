CREATE SCHEMA dannys_diner;
SET search_path = dannys_diner;

CREATE TABLE sales (
  "customer_id" VARCHAR(1),
  "order_date" DATE,
  "product_id" INTEGER
);

INSERT INTO sales
  ("customer_id", "order_date", "product_id")
VALUES
  ('A', '2021-01-01', '1'),
  ('A', '2021-01-01', '2'),
  ('A', '2021-01-07', '2'),
  ('A', '2021-01-10', '3'),
  ('A', '2021-01-11', '3'),
  ('A', '2021-01-11', '3'),
  ('B', '2021-01-01', '2'),
  ('B', '2021-01-02', '2'),
  ('B', '2021-01-04', '1'),
  ('B', '2021-01-11', '1'),
  ('B', '2021-01-16', '3'),
  ('B', '2021-02-01', '3'),
  ('C', '2021-01-01', '3'),
  ('C', '2021-01-01', '3'),
  ('C', '2021-01-07', '3');
 

CREATE TABLE menu (
  "product_id" INTEGER,
  "product_name" VARCHAR(5),
  "price" INTEGER
);

INSERT INTO menu
  ("product_id", "product_name", "price")
VALUES
  ('1', 'sushi', '10'),
  ('2', 'curry', '15'),
  ('3', 'ramen', '12');
  

CREATE TABLE members (
  "customer_id" VARCHAR(1),
  "join_date" DATE
);

INSERT INTO members
  ("customer_id", "join_date")
VALUES
  ('A', '2021-01-07'),
  ('B', '2021-01-09');


For MYSQL Create and Insert Statements
CREATE TABLE sales (
  customer_id VARCHAR(1),
  order_date DATE,
  product_id int
);

INSERT INTO sales (customer_id, order_date, product_id)
VALUES
  ('A', '2021-01-01', '1'),
  ('A', '2021-01-01', '2'),
  ('A', '2021-01-07', '2'),
  ('A', '2021-01-10', '3'),
  ('A', '2021-01-11', '3'),
  ('A', '2021-01-11', '3'),
  ('B', '2021-01-01', '2'),
  ('B', '2021-01-02', '2'),
  ('B', '2021-01-04', '1'),
  ('B', '2021-01-11', '1'),
  ('B', '2021-01-16', '3'),
  ('B', '2021-02-01', '3'),
  ('C', '2021-01-01', '3'),
  ('C', '2021-01-01', '3'),
  ('C', '2021-01-07', '3');

CREATE TABLE menu (
  product_id INTEGER,
  product_name VARCHAR(5),
  price INTEGER
);

INSERT INTO menu
  (product_id, product_name, price)
VALUES
  ('1', 'sushi', '10'),
  ('2', 'curry', '15'),
  ('3', 'ramen', '12');
  

CREATE TABLE members (
  customer_id VARCHAR(1),
  join_date DATE
);

INSERT INTO members
  (customer_id, join_date)
VALUES
  ('A', '2021-01-07'),
  ('B', '2021-01-09');


/* --------------------
   Case Study Questions
   --------------------*/

-- 1. What is the total amount each customer spent at the restaurant?

SELECT sales.customer_id, sum(price) from sales join menu using (product_id) group by sales.customer_id;


-- 2. How many days has each customer visited the restaurant?

SELECT customer_id, COUNT(DISTINCT order_date) AS customers_visited FROM sales GROUP BY customer_id;

-- 3. What was the first item from the menu purchased by each customer?

SELECT sales.customer_id, menu.product_name from sales join menu using (product_id) where sales.order_date = "2021-01-01" group by menu.product_name, sales.customer_id;
================================================OR========================================================================================================================
with cte as (
SELECT sales.customer_id as customerID, menu.product_name as productName, dense_rank() over(partition by sales.customer_id order by sales.order_date asc) as rnk 
from sales join menu on sales.product_id = menu.product_id
)
select customerID, productName from cte where rnk = 1 group by customerID,productName

-- 4. What is the most purchased item on the menu and how many times was it purchased by all customers?

WITH product_cte AS (
SELECT menu.product_name, count(1) AS most_purchased FROM menu 
JOIN sales 
USING (product_id) GROUP BY menu.product_name 
)
SELECT product_name,  max(most_purchased) FROM product_cte

TIP: We can use TOP 1 filter in count to find out the first occurence 

-- 5. Which item was the most popular for each customer?
WITH product_cte AS (
SELECT menu.product_name, 
dense_rank() OVER(PARTITION BY customer_id order by count(1) DESC) as rn,
count(1) as order_count,
sales.customer_id 
FROM menu 
JOIN sales 
USING (product_id) GROUP BY menu.product_name, sales.customer_id)

SELECT customer_id, product_name, order_count FROM product_cte where rn = 1

-- 6. Which item was purchased first by the customer after they became a member?

WITH cte as (
SELECT members.customer_id,sales.product_id,members.join_date,sales.order_date,
dense_rank() over(partition by members.customer_id order by sales.order_date) as rnk
from members
join sales 
on sales.customer_id = members.customer_id
and members.join_date <= sales.order_date 
)
select cte.customer_id,menu.product_name, 
cte.order_date,cte.join_date
from cte join menu 
using (product_id) where rnk = 1

-- 7. Which item was purchased just before the customer became a member?

WITH cte as (
SELECT members.customer_id,sales.product_id,members.join_date,sales.order_date,
dense_rank() over(partition by members.customer_id order by sales.order_date DESC) as rnk
from members
join sales 
on sales.customer_id = members.customer_id
and members.join_date > sales.order_date 
)
select cte.customer_id,menu.product_name, 
cte.order_date,cte.join_date
from cte join menu 
using (product_id) where rnk = 1
# we used order by sales.order_date DESC because to find out the last order_date before a customer becomes a member

-- 8. What is the total items and amount spent for each member before they became a member?
-- 9.  If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?
-- 10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?
